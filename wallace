##
## some code from wallace ecological niche modelling sesssion
##

Please find below the R code history from your *Wallace* v1.0.6.2
session.

You can reproduce your session results by running this R Markdown file
in RStudio.

Each code block is called a “chunk”, and you can run them either
one-by-one or all at once by choosing an option in the “Run” menu at the
top-right corner of the “Source” pane in RStudio.

For more detailed information see
<a href="http://rmarkdown.rstudio.com" class="uri">http://rmarkdown.rstudio.com</a>).

### Package installation

Wallace uses the following R packages that must be installed and loaded
before starting.

```{r}
library(spocc)
library(spThin)
library(dismo)
library(rgeos)
library(ENMeval)
library(dplyr)
```

Wallace also includes several functions developed to help integrate
different packages and some additional functionality. For this reason,
it is necessary to load the file `functions.R`, The function
`system.file()` finds this script, and `source()` loads it.

```{r}
source(system.file('shiny/funcs', 'functions.R', package = 'wallace'))
```

Record of analysis for \*\*.
----------------------------

User CSV path with occurrence data. If the CSV file is not in the
current workspace, change to the correct file path (e.g.
“/Users/darwin/Documents/occs.csv”).

```{r}
# NOTE: provide the path to the folder that contains the CSV file
d.occs <- ''
# create path to user occurrences csv file
userOccs.path <- file.path(d.occs, "finalWC.csv")
# read in csv
userOccs.csv <- read.csv(userOccs.path, header = TRUE)
# remove rows with duplicate coordinates
occs.dups <- duplicated(userOccs.csv[c('longitude', 'latitude')])
occs <- userOccs.csv[!occs.dups,]
# remove NAs
occs <- occs[complete.cases(occs$longitude, occs$latitude), ]
# give all records a unique ID
occs$occID <- row.names(occs)
```

### Process Occurrence Data

The following code recreates the polygon used to select occurrences to
keep in the analysis.

```{r}
selCoords <- data.frame(x = c(23.9502, 23.9173, 22.2204, 22.1765, 23.9502), y = c(-18.8907, -19.8701, -19.8856, -18.8179, -18.8907))
selPoly <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(selCoords)), ID=1)))
occs.xy <- occs[c('longitude', 'latitude')]
sp::coordinates(occs.xy) <- ~ longitude + latitude
intersect <- sp::over(occs.xy, selPoly)
intersect.rowNums <- as.numeric(which(!(is.na(intersect))))
occs <- occs[intersect.rowNums, ]
```

### Obtain Environmental Data

Using WorldClim
(<a href="http://www.worldclim.org/" class="uri">http://www.worldclim.org/</a>)
bioclimatic dataset at resolution of 0.5 arcmin.

```{r}
# get WorldClim bioclimatic variable rasters
envs <- raster::getData(name = "worldclim", var = "bio", res = 0.5, lat = -20.848, lon = 23.439)
# change names rasters variables
envRes <- 0.5
if (envRes == 0.5) {
  i <- grep('_', names(envs))
  editNames <- sapply(strsplit(names(envs)[i], '_'), function(x) x[1])
  names(envs)[i] <- editNames
}
i <- grep('bio[0-9]$', names(envs))
editNames <- paste('bio', sapply(strsplit(names(envs)[i], 'bio'), function(x) x[2]), sep='0')
names(envs)[i] <- editNames
# subset by those variables selected
envs <- envs[[c('bio01', 'bio08', 'bio3', 'bio4', 'bio5', 'bio6', 'bio7', 'bio8', 'bio9', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')]]
# extract environmental values at occ grid cells
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
# remove occs without environmental values
occs <- occs[!is.na(locs.vals), ] 
```

### Process Environmental Data

Background selection technique chosen as Bounding Box.

```{r}
xmin <- min(occs$longitude)
xmax <- max(occs$longitude)
ymin <- min(occs$latitude)
ymax <- max(occs$latitude)
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
```

Buffer size of the study extent polygon defined as 0.15 degrees.

```{r}
bgExt <- rgeos::gBuffer(bgExt, width = 0.15)
```

Mask environmental variables by Bounding Box, and take a random sample
of background values from the study extent. As the sample is random,
your results may be different than those in the session. If there seems
to be too much variability in these background samples, try increasing
the number from 10,000 to something higher (e.g. 50,000 or 100,000). The
better your background sample, the less variability you’ll have between
runs.

```{r}
# crop the environmental rasters by the background extent shape
envsBgCrop <- raster::crop(envs, bgExt)
# mask the background extent shape from the cropped raster
envsBgMsk <- raster::mask(envsBgCrop, bgExt)
# sample random background points
bg.xy <- dismo::randomPoints(envsBgMsk, 10000)
# convert matrix output to data frame
bg.xy <- as.data.frame(bg.xy) 
```

### Partition Occurrence Data

Occurrence data is now partitioned for cross-validation, a method that
iteratively builds a model on all but one group and evaluates that model
on the left-out group.

For example, if the data is partitioned into 3 groups A, B, and C, a
model is first built with groups A and B and is evaluated on C. This is
repeated by building a model with B and C and evaluating on A, and so on
until all combinations are done.

Cross-validation operates under the assumption that the groups are
independent of each other, which may or may not be a safe assumption for
your dataset. Spatial partitioning is one way to ensure more
independence between groups.

You selected to partition your occurrence data by the method.

```{r}
occs.xy <- occs[c('longitude', 'latitude')]
group.data <- ENMeval::get.jackknife(occ=occs.xy, bg.coords=bg.xy)
```

```{r}
# pull out the occurrence and background partition group numbers from the list
occs.grp <- group.data[[1]]
bg.grp <- group.data[[2]]
```

### Build and Evaluate Niche Model

You selected the maxent model.

```{r}
# define the vector of regularization multipliers to test
rms <- seq(1, 2, 6)
# iterate model building over all chosen parameter settings
e <- ENMeval::ENMevaluate(occs.xy, envsBgMsk, bg.coords = bg.xy, RMvalues = rms, fc = 'LQ',
                          method = 'user', occs.grp, bg.grp, clamp = TRUE, algorithm = "maxnet")

# unpack the results data frame, the list of models, and the RasterStack of raw predictions
evalTbl <- e@results
evalMods <- e@models
names(evalMods) <- e@results$settings
evalPreds <- e@predictions
```

```{r}
# view ENMeval results
ENMeval::eval.plot(evalTbl, value = "avg.test.AUC")
```

```{r}
# Select your model from the models list
mod <- evalMods[["LQ_1"]]
```

```{r}
# generate raw prediction
pred <- evalPreds[["LQ_1"]]
```

```{r}
# get predicted values for occurrence grid cells
occPredVals <- raster::extract(pred, occs.xy)
# define minimum training presence threshold
thr <- thresh(occPredVals, "mtp")
# threshold model prediction
pred <- pred > thr
```

```{r}
# plot the model prediction
plot(pred)
```

### Project Niche Model

You selected to project your model. First define a polygon with the
coordinates you chose, then crop and mask your predictor rasters.
Finally, predict suitability values for these new raster cells based on
the model you selected.

```{r}
projCoords <- data.frame(x = c(22.2095, 23.2145, 23.4671, 23.5824, 23.813, 24.0052, 24.0821, 24.1041, 24.0821, 23.7911, 23.4341, 23.209, 22.9234, 22.4292, 22.1327, 22.1546, 22.2095), y = c(-18.7763, -18.6827, -18.3232, -18.2502, -18.3389, -18.4952, -18.9479, -19.1763, -19.5443, -19.7977, -19.8907, -19.9837, -19.994, -19.8907, -19.5028, -18.9427, -18.7763))
projPoly <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(projCoords)), ID=1)))
```

### Project Niche Model to New Extent

Now use crop and mask the predictor variables by projPoly, and use the
maxnet.predictRaster() function to predict the values for the new extent
based on the model selected.

```{r}
predsProj <- raster::crop(envs, projPoly)
predsProj <- raster::mask(predsProj, projPoly)
proj <- ENMeval::maxnet.predictRaster(mod, predsProj, type = 'exponential', clamp = TRUE)
```

```{r}
# get predicted values for occurrence grid cells
occPredVals <- raster::extract(pred, occs.xy)
# define minimum training presence threshold
thr <- thresh(occPredVals, "mtp")
# threshold model prediction
proj <- proj > thr
```

```{r}
# plot the model prediction
plot(proj)
```

### Calculate Environmental Similarity

To visualize the environmental difference between the occurrence
localities and your selected projection extent, calculate a
multidimensional environmental similarity surface (MESS). High negative
values mean great difference, whereas high positive values mean great
similarity. Interpreting the projected suitability for areas with high
negative values should be done with extreme caution, as they are outside
the environmental range of the occurrence localities.

```{r}
# extract environmental values from occurrence localities and background -- these were the values that went into the model
names(bg.xy) <- names(occs.xy)
all.xy <- rbind(occs.xy, bg.xy)
occEnvVals <- raster::extract(envs, all.xy)
# compare these values with the projection extent (envsMsk)
proj.mess <- dismo::mess(predsProj, occEnvVals)
plot(proj.mess)
```
